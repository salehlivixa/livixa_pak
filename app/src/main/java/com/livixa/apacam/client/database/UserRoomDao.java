package com.livixa.apacam.client.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table NOTE.
 */
public class UserRoomDao extends AbstractDao<UserRoomTable, Long> {

	public static final String TABLENAME = "UserRoom";

	/**
	 * Properties of entity Note.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Integer.class, "id",
				true, "_id");
		public final static Property URLSLUG = new Property(1, String.class,
				"UrlSlug", false, "UrlSlug");
		public final static Property NAME = new Property(2, String.class,
				"Name", false, "Name");
		public final static Property CITYID = new Property(3, String.class,
				"CityId", false, "CityId");
	}

	public UserRoomDao(DaoConfig config) {
		super(config);
	}

	//abc
	/*public UserRoomDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}*/

	/**
	 * Creates the underlying database table.
	 */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'" + TABLENAME + "' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'UrlSlug' TEXT NOT NULL," + // 1: Slug
				"'Name' TEXT NOT NULL," + // 2: Name
				"'CityId' TEXT NOT NULL);" // 3: city id
		);
	}

	/**
	 * Drops the underlying database table.
	 */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'"
				+ TABLENAME + "'";
		db.execSQL(sql);
	}

	/**
	 * @inheritdoc
	 */
	@Override
	protected void bindValues(SQLiteStatement stmt, UserRoomTable entity) {
		stmt.clearBindings();
		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}
		// stmt.bindString(2, entity.getUrl_slug());
		// stmt.bindString(3, entity.getCity_name());
		// stmt.bindLong(4, entity.getCity_id());
	}

	/**
	 * @inheritdoc
	 */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/**
	 * @inheritdoc
	 */
	@Override
	public UserRoomTable readEntity(Cursor cursor, int offset) {
		// UserRoomTable entity = new UserRoomTable(
		// cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
		// cursor.getString(offset + 1), // city url_slug
		// cursor.getString(offset + 2), // city name
		// cursor.getLong(offset + 3) // city id
		// );
		// return entity;
		return null;
	}

	/**
	 * @inheritdoc
	 */
	@Override
	public void readEntity(Cursor cursor, UserRoomTable entity, int offset) {
		entity.setId(cursor.isNull(offset + 0) ? null : cursor
				.getLong(offset + 0));
//		entity.setUrl_slug(cursor.getString(offset + 1));
//		entity.setCity_name(cursor.getString(offset + 2));
//		entity.setCity_id(cursor.getLong(offset + 3));
	}

	/**
	 * @inheritdoc
	 */
	@Override
	protected Long updateKeyAfterInsert(UserRoomTable entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/**
	 * @inheritdoc
	 */
	@Override
	public Long getKey(UserRoomTable entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/**
	 * @inheritdoc
	 */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
